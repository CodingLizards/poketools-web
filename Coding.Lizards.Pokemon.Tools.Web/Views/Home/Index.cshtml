@model HomePageViewModel
@{
    ViewBag.Title = Texts.Home_Index_Title;
}
<div class="ui middle aligned center aligned grid">
    <div class="ui twelve wide left aligned column stacked segment">
        <div class="ui secondary pointing menu">
            <div class="header item">@ViewBag.Title</div>
            <div class="right menu">
                <a data-tab="fighting" class="active item">@Texts.Home_Index_Fight</a>
                <a data-tab="xpcalc" class="item">@Texts.Home_Index_XpCalc</a>
            </div>
        </div>
        <div data-tab="fighting" class="ui active basic tab segment">
            <div class="ui grid form">
                <div class="ui eight wide column">
                    <h4 class="ui dividing header">@Texts.Home_Index_MyPokemon</h4>
                    <div class="inline field">
                        <label>@Texts.Home_Index_Level</label>
                        @Html.DropDownList("fight_attackingpokemon_level", new SelectList(Enumerable.Range(1, 100)), new { @class = "ui compact search dropdown" })
                        <label>@Texts.Home_Index_Pokemon</label>
                        <div id="attackingpokemon" class="ui search selection dropdown">
                            <div class="default text">@Texts.Home_Index_SearchPokemon</div>
                            <i class="dropdown icon"></i>
                            <div class="menu">
                                @foreach (var item in Model.Pokemon) {
                                    <div data-value="@item.Id" class="item">
                                        <img src="@Url.Action("GetThumbnail", "Pokemon", new { id = item.Id })" alt="" />
                                        @item.GetLocalizedName()
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="ui eight wide column">
                    <h4 class="ui dividing header">@Texts.Home_Index_OpponentPokemon</h4>
                    <div class="inline field">
                        <label>@Texts.Home_Index_Level</label>
                        @Html.DropDownList("fight_defendingpokemon_level", new SelectList(Enumerable.Range(1, 100)), new { @class = "ui compact search dropdown" })
                        <label>@Texts.Home_Index_Pokemon</label>
                        <div id="defendingpokemon" class="ui search selection dropdown">
                            <div class="default text">@Texts.Home_Index_SearchPokemon</div>
                            <i class="dropdown icon"></i>
                            <div class="menu">
                                @foreach (var item in Model.Pokemon) {
                                    <div data-value="@item.Id" class="item">
                                        <img src="@Url.Action("GetThumbnail", "Pokemon", new { id = item.Id })" alt="" />
                                        @item.GetLocalizedName()
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="ui sixteen wide column">
                    <h4 class="ui dividing header">@Texts.Home_Index_UsedAttack</h4>
                    <div id="usedattack" class="ui fluid search selection dropdown">
                        <div class="default text">@Texts.Home_Index_SearchAttack</div>
                        <i class="dropdown icon"></i>
                        <div class="menu">
                            @foreach (var item in Model.Attacks) {
                                <div data-value="@item.Id" class="item">
                                    @item.GetLocalizedName()
                                    (@item.Type.DisplayName() &mdash; @Texts.Attack_List_Strength: @item.Strength)
                                </div>
                            }
                        </div>
                    </div>
                    <button class="ui primary button" type="button">@Texts.Home_Index_Fight</button>
                </div>
            </div>
        </div>
        <div data-tab="xpcalc" class="ui basic tab segment">XP Calc</div>
    </div>
</div>

@section scripts {
    <script>
        $(function () {
            $('.menu .item').tab();
            $('select, .ui.dropdown').dropdown();

            var recalculateAttack = function () {
                var calculateHp = function (base, dv, fp, level) {
                    return Math.floor((2 * base + dv + (fp / 4) + 100) * (level / 100) + 10);
                };
                var calculateOther = function (base, dv, fp, level) {
                    return Math.floor(((2 * base + dv + (fp / 4)) * (level / 100) + 5) * 1);
                };

                var attackingPokemon = undefined;
                var defendingPokemon = undefined;
                var usedAttack = undefined;
                $.getJSON('/attack/' + $('#usedattack').dropdown('get value')).then(function (attack) {
                    usedAttack = attack;
                    return $.getJSON('/pokemon/' + $('#attackingpokemon').dropdown('get value'));
                }).then(function (pokemon) {
                    attackingPokemon = pokemon;
                    return $.getJSON('/pokemon/' + $('#defendingpokemon').dropdown('get value'));
                }).then(function (pokemon) {
                    defendingPokemon = pokemon;
                    var calcDamage = function (z, dv, fp) {
                        var baseStrength = usedAttack.Strength;
                        var basedamage = baseStrength;
                        var attackingLevel = $('#fight_attackingpokemon_level').val();
                        var defendingLevel = $('#fight_defendingpokemon_level').val();

                        var attack = 0;
                        var defense = 0;
                        if (usedAttack.DamageClass == 0) {
                            attack = calculateOther(attackingPokemon.BaseAttack, dv, fp, attackingLevel);
                            defense = calculateOther(defendingPokemon.BaseDefense, dv, fp, defendingLevel);
                        } else if (usedAttack.DamageClass == 1) {
                            attack = calculateOther(attackingPokemon.BaseSpecialAttack, dv, fp, attackingLevel);
                            defense = calculateOther(defendingPokemon.BaseSpecialDefense, dv, fp, defendingLevel);
                        } else {
                            return 0;
                        }

                        var directhit = 1;

                        var f1 = 1;
                        var f2 = 1;
                        var f3 = 1;

                        var stab = 0;
                        if (usedAttack.Type == attackingPokemon.FirstType || usedAttack.Type == attackingPokemon.SecondType) {
                            stab = 1.5;
                        }

                        var type1 = 0;
                        var type2 = 0;

                        return ((level * (2 / 5) + 2) * basedamage * (attack / (50 * defense)) * f1 + 2) * directhit * f2 * (z / 100) * stab * type1 * type2 * f3;
                    };
                    var minDamage = calcDamage(85, 1, 1);
                    var maxDamage = calcDamage(100, 31, 252);
                });
            };
        });
    </script>
}