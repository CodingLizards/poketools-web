@model DetailsPokemonViewModel
@{
    ViewBag.Title = Texts.Pokemon_Details_Title;
}

<div class="ui middle aligned center aligned grid">
    <div class="ui twelve wide left aligned column stacked segment">
        <div class="ui secondary pointing menu">
            <div class="item"><img class="ui image" height="17" width="20" src="@Url.Action("GetThumbnail", new { id = Model.Item.Id })" alt="" /></div>
            <div class="header item">@Model.Item.GetLocalizedName() @ViewBag.Title</div>
            @if (User.Identity.IsAuthenticated) {
                <div class="right menu">
                    <a href="@Url.Action("Edit", new { id = Model.Item.Id })" class="item"><i class="edit icon"></i> @Texts.Pokemon_Details_Edit</a>
                    <a href="@Url.Action("Delete", new { id = Model.Item.Id })" class="item"><i class="trash icon"></i> @Texts.Pokemon_Details_Delete</a>
                </div>
            }
        </div>
        <div class="ui form">
            <div class="four fields">
                <div class="field">
                    <img src="@Url.Action("GetSprite", new { id = Model.Item.Id })" alt="" />
                </div>
                <div class="field">
                    @Html.LabelFor(m => m.Item.FirstType)
                    <div class="ui transparent input">
                        <input type="text" value="@Model.Item.FirstType.DisplayName()" readonly />
                    </div>
                </div>
                <div class="field">
                    @Html.LabelFor(m => m.Item.SecondType)
                    <div class="ui transparent input">
                        <input type="text" value="@Model.Item.SecondType.DisplayName()" readonly />
                    </div>
                </div>
                <div class="field">
                    @Html.LabelFor(m => m.Item.ExperienceType)
                    <div class="ui transparent input">
                        <input type="text" value="@Model.Item.ExperienceType.DisplayName()" readonly />
                    </div>
                </div>
            </div>
            <div class="four fields">
                <div class="field">
                    <label for="@Html.IdFor(m => m.Item.Id)">#</label>
                    <div class="ui transparent input">
                        @Html.TextBoxFor(m => m.Item.Id, new { @readonly = true })
                    </div>
                </div>
                <div class="field">
                    @Html.LabelFor(m => m.Item.EnglishName)
                    <div class="ui transparent input">
                        @Html.TextBoxFor(m => m.Item.EnglishName, new { @readonly = true })
                    </div>
                </div>
                <div class="field">
                    @Html.LabelFor(m => m.Item.GermanName)
                    <div class="ui transparent input">
                        @Html.TextBoxFor(m => m.Item.GermanName, new { @readonly = true })
                    </div>
                </div>
                <div class="field">
                    @Html.LabelFor(m => m.Item.FrenchName)
                    <div class="ui transparent input">
                        @Html.TextBoxFor(m => m.Item.FrenchName, new { @readonly = true })
                    </div>
                </div>
            </div>
            <h4 class="ui dividing header">@Texts.Pokemon_Details_BaseValues</h4>
            <div class="four fields">
                <div class="field">
                    @Html.LabelFor(m => m.Item.BaseExperience)
                    <div class="ui transparent input">
                        @Html.TextBoxFor(m => m.Item.BaseExperience, new { @readonly = true })
                    </div>
                </div>
                <div class="field">
                    @Html.LabelFor(m => m.Item.BaseHealth)
                    <div class="ui transparent input">
                        @Html.TextBoxFor(m => m.Item.BaseHealth, new { @readonly = true })
                    </div>
                </div>
                <div class="field">
                    @Html.LabelFor(m => m.Item.BaseAttack)
                    <div class="ui transparent input">
                        @Html.TextBoxFor(m => m.Item.BaseAttack, new { @readonly = true })
                    </div>
                </div>
                <div class="field">
                    @Html.LabelFor(m => m.Item.BaseDefense)
                    <div class="ui transparent input">
                        @Html.TextBoxFor(m => m.Item.BaseDefense, new { @readonly = true })
                    </div>
                </div>
            </div>
            <div class="three fields">
                <div class="field">
                    @Html.LabelFor(m => m.Item.BaseSpecialAttack)
                    <div class="ui transparent input">
                        @Html.TextBoxFor(m => m.Item.BaseSpecialAttack, new { @readonly = true })
                    </div>
                </div>
                <div class="field">
                    @Html.LabelFor(m => m.Item.BaseSpecialDefense)
                    <div class="ui transparent input">
                        @Html.TextBoxFor(m => m.Item.BaseSpecialDefense, new { @readonly = true })
                    </div>
                </div>
                <div class="field">
                    @Html.LabelFor(m => m.Item.BaseSpeed)
                    <div class="ui transparent input">
                        @Html.TextBoxFor(m => m.Item.BaseSpeed, new { @readonly = true })
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>